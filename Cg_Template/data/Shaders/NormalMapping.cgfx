#include "General.header"
#include "Functions.header"

void mainVP(in Vertex IN, out Fragment OUT)
{
	OUT.pos = mul(ModelViewProjection, float4(IN.pos, 1));
	OUT.wpos = mul(ModelMatrix, float4(IN.pos, 1));
	
	float3 worldnormal = normalize(mul(ModelMatrixIT, IN.normal));
	float3 worldbinormal = normalize(mul(ModelMatrixIT, IN.binormal));
	float3 worldtangent = normalize(mul(ModelMatrixIT, IN.tangent));
	
	OUT.normal = float4(worldnormal, 1.0);
	OUT.binormal = float4(worldbinormal, 1.0);
	OUT.tangent = float4(worldtangent, 1.0);
	
	OUT.uv = IN.uv;
	OUT.diffuse = IN.diffuse;
}

void mainFP(  in Fragment IN, out float4 color : COLOR)
{
	float4 normalTex = tex2D(g_normalmap, IN.uv);
	float4 diffuse = Material.Diffuse;;
	float4 specular = Material.Specular;
	float4 emissive = Material.Emissive;

	if(Material.DiffuseMap != 0)
	{
		diffuse = tex2D(g_DiffuseMap, IN.uv);
	}
	if(Material.SpecularMap != 0)
	{
		specular = tex2D(g_specularmap, IN.uv);
	}
	if(Material.EmissiveMap != 0)
	{
		emissive = tex2D(g_emissivemap, IN.uv);
	}
	
	float4x4 tbnmatrix;
	tbnmatrix[0] = IN.tangent; 
	tbnmatrix[1] = IN.binormal;
	tbnmatrix[2] = IN.normal;
	
	float4 normalSample = expand(normalTex);
	normalSample = mul(normalSample, tbnmatrix);
	
	float4 lambert;
	float4 phong;
	
	if(Material.NormalMap != 0)
	{
		lambert = CalcLambert(IN.wpos.xyz, normalSample.xyz, Light);
		phong = CalcSpecularity(IN.wpos.xyz, normalSample.xyz, Material.Shininess, Light);
	}
	else
	{
		lambert = CalcLambert(IN.wpos.xyz, IN.normal, Light);
		phong = CalcSpecularity(IN.wpos.xyz, IN.normal, Material.Shininess, Light);
	}
	
	float4 ambientfinal = GlobalAmbient * Material.Ambient;
	float4 diffusefinal = lambert * diffuse;
	float4 specularfinal = phong * specular;
	float4 emissivefinal = emissive;
	
	color = ambientfinal + emissivefinal + (diffusefinal + specularfinal);
}

technique t0
{
    pass p0
    {
        VertexProgram = compile arbvp1 mainVP();
        FragmentProgram = compile arbfp1 mainFP();
    }
}