#include "General.header"
#include "Functions.header"

void mainVP( in Vertex IN, out Fragment OUT )
{
	OUT.pos = mul(ModelViewProjection, float4(IN.pos, 1));
	OUT.wpos = mul(ModelMatrix, float4(IN.pos, 1));
	OUT.normal = float4(mul(ModelMatrixIT, IN.normal), 0);
	OUT.uv = IN.uv;
}

void mainFP( in Fragment IN, out float4 color : COLOR )
{
	float4 diffuse = Material.Diffuse;;
	float4 emissive = Material.Emissive;

	if(Material.DiffuseMap != 0)
	{
		diffuse = tex2D(g_DiffuseMap, IN.uv);
	}
	if(Material.EmissiveMap != 0)
	{
		emissive = tex2D(g_emissivemap, IN.uv);
	}
	
	float4 N = normalize(IN.normal);
	float4 L = normalize( Light.Direction * 1.0f );
	
	float4 calcDiffuse = float4( 0, 0, 0, 1.0f );
	float NDotL =saturate(dot(N, L));	
	
	if( NDotL > 0 )
	{
		calcDiffuse = NDotL * Light.Color * diffuse;
	}
	
	float4 ambient = GlobalAmbient * Material.Ambient;
	diffuse = calcDiffuse * diffuse;
	
	color = ambient + emissive + diffuse;
}

technique t0
{
    pass p0
    {
        VertexProgram = compile arbvp1 mainVP();
        FragmentProgram = compile arbfp1 mainFP();
    }
}