#include "General.header"
#include "Functions.header"

void shadowVP(in Vertex IN, out Fragment OUT)
{
	OUT.pos = mul(ModelViewProjection, float4(IN.pos, 1));
}

void mainVP( in Vertex IN, out Fragment OUT )
{
	OUT.pos = mul(ModelViewProjection, float4(IN.pos, 1));
	OUT.wpos = mul(ModelMatrix, float4(IN.pos, 1));
	OUT.normal = float4(mul(ModelMatrixIT, IN.normal), 0);
	OUT.uv = IN.uv;
	
	OUT.texCoordProj = mul(TextureMatrix, float4(IN.pos, 1));
}

void mainFP(	in Fragment IN, out float4 color : COLOR )
{
	float4 diffuse = Material.Diffuse;;
	float4 specular = Material.Specular;
	float4 emissive = Material.Emissive;

	if(Material.DiffuseMap != 0)
	{
		diffuse = tex2D(g_DiffuseMap, IN.uv);
	}
	if(Material.SpecularMap != 0)
	{
		specular = tex2D(g_specularmap, IN.uv);
	}
	if(Material.EmissiveMap != 0)
	{
		emissive = tex2D(g_emissivemap, IN.uv);
	}
	
	float4 diffuseLight;
    float4 specularLight;
    SpotAttenLighting( Light, IN.wpos.xyz, IN.normal, EyePosition, Material.Shininess, diffuseLight, specularLight );
	
	float4 ambientfinal = GlobalAmbient * Material.Ambient;
	float4 diffusefinal = diffuseLight * diffuse;
	float4 specularfinal = specularLight * specular;
	float4 emissivefinal = emissive;

    // Use PCF to improve shadow quality at the shadow edges.
    float shadowCoeff = 0.0f; 
    for ( int i = 0; i < 9; ++i )
    {
        shadowCoeff += tex2Dproj( g_depthmap, IN.texCoordProj + fTaps_PCF[i] * 0.01f ) / 9.0f;
    }

    color = emissivefinal + ambientfinal + ( shadowCoeff * ( diffusefinal + specularfinal ) );
    color.w = 1;
}

technique shadow
{
	pass p0
	{
		VertexProgram = compile arbvp1 shadowVP();
		DepthTestEnable = true;
		CullFaceEnable = true;
		CullFace = Front;
	}
}

technique main
{
    pass p0
    {
        VertexProgram = compile arbvp1 mainVP();
        FragmentProgram = compile arbfp1 mainFP();
        DepthTestEnable = true;
        CullFaceEnable = true;
        CullFace = Back;
    }
}